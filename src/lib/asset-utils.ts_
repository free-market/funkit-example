import React, { useCallback, useEffect, useState } from 'react'
import { useMetaMask } from 'metamask-react'
import { type Provider, Web3Provider } from '@ethersproject/providers'
import { Contract } from '@ethersproject/contracts'
// import { Memoize } from '@freemarket/client-sdk'

import { type BigNumber } from '@ethersproject/bignumber'
import {
  type AssetReference,
  formatNumber,
  assert,
  type Chain,
  getChainFromProvider,
  getChainFromId,
  Memoize,
  FungibleTokenReference,
} from '@freemarket/client-sdk'
const abi = [
  // Read-Only Functions
  'function balanceOf(address owner) view returns (uint256)',
  'function decimals() view returns (uint8)',
  'function symbol() view returns (string)',
]

const NATIVE_ASSET_ADDRESS = '0x0'

interface AssetMetadata {
  symbol: string
  decimals: number
}

class AssetUtils {
  address: string
  provider: Provider
  constructor(address: string, provider: Provider) {
    this.address = address
    this.provider = provider
  }

  @Memoize()
  async getMetadata(assetAddress: string): Promise<AssetMetadata> {
    if (assetAddress === NATIVE_ASSET_ADDRESS) {
      return { symbol: 'Native', decimals: 18 }
    }
    const erc20 = this.contract()
    const [symbol, decimals] = await Promise.all([erc20.symbol() as Promise<string>, erc20.decimals() as Promise<BigNumber>])
    return { symbol, decimals: decimals.toNumber() }
  }

  async getBalance(assetAddress: string): Promise<string> {
    const bn = await (assetAddress === NATIVE_ASSET_ADDRESS ? this.getNativeBalance() : this.getErc20Balance(assetAddress))
    return bn.toString()
  }

  async getErc20Balance(erc20Address: string): Promise<string> {
    const bn = await this.contract().balanceOf(erc20Address)
    return bn.toString()
  }

  async getNativeBalance(): Promise<string> {
    const bn = await this.provider.getBalance(this.address)
    return bn.toString()
  }

  private contract() {
    return new Contract(this.address, abi, this.provider)
  }
}

interface AssetBalance {
  assetAddress: string
  balance: string
}

function getChain(chainId: string | null) {
  if (chainId === null) {
    return null
  }
  let s = chainId
  if (s.startsWith('0x')) {
    s = s.slice(2)
  }
  const chainNum = parseInt(s, 16)
  return getChainFromId(chainNum)
}

export async function useAssetBalances(assetRefs: AssetReference[]): Promise<AssetBalance[] | undefined> {
  const [balances, setBalances] = useState<AssetBalance[] | undefined>(undefined)

  const { ethereum, account, chainId } = useMetaMask()

  useEffect(() => {
    if (chainId && account) {
      const chain = getChain(chainId)
      const provider = new Web3Provider(ethereum)
      const utils = new AssetUtils(account, provider)
      const assetAddresses = assetRefs.map((assetRef, i) => {
        assert(typeof assetRef !== 'string')
        if (assetRef.type === 'native') {
          return NATIVE_ASSET_ADDRESS
        }
        return assetRef.chains[chain].address
      })
      const balances = assetAddresses.map(assetAddress => {
        return utils.getBalance(assetAddress)
      })
      void Promise.all(balances).then(balances => {
        setBalances(
          balances.map((balance, i) => {
            const assetAddress = assetAddresses[i]
            const assetRef = assetRefs[i]
            assert(typeof assetRef !== 'string')
            return {
              assetAddress,
              balance: formatNumber(balance, assetRef.decimals),
            }
          })
        )
      })
    }
  }, [chainId, account])
  return balances
  // useEffect(() => {
  //   if (account) {
  //     const provider = new Web3Provider(ethereum)
  //   const chain = getChain(chainId)

  //     const utils = new AssetUtils(account, provider)
  //     const balances = assetRefs.map(assetRef => {
  //       assert(typeof assetRef !== 'string')
  //       if (assetRef.type === 'native') {
  //         return utils.getNativeBalance()
  //       } else {
  //         return utils.getErc20Balance(assetRef.)
  //       }

  //     })
  //     return balances
  //   }
  // }, [ethereum, account, chainId])
}
